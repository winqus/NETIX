/' ********************************************************************************************
    This .puml file has several uml diagrams that are related to this user story.
    They are exported as several diagram files automatically.

    PlantUML syntax notes:
    ++ Activate the target (optionally a color may follow this)
    -- Deactivate the source
    ** Create an instance of the target
    !! Destroy an instance of the target

   ***************************************************************************************** '/

@startuml E1U1_PVL1
!include MagicDraw.puml
mainframe E1U1_Create_Movie_Manually_PVL1

actor Manager as Mngr
participant "NETIX" as NTX 

activate Mngr

Mngr -> NTX++   : Open movie creation form
Mngr <<-- NTX   : Display empty movie creation form

loop while validation errors present
    Mngr -> NTX     : Fill form data
    NTX -> NTX      : Validate form data
    alt validation errors
        Mngr <<-- NTX   : Display errors
    else else
        Mngr <<-- NTX   : No errors
    end
end

loop while poster invalid
    Mngr -> NTX     :  Select poster file or enter URL
    alt validation errors
        NTX -> NTX      : Disable manual poster\n crop adjustment
        Mngr <<-- NTX   : Display errors
    else else
        NTX -> NTX      : Automatically crop poster
        NTX -> NTX      : Enable manual poster\n crop adjustment
        Mngr <<-- NTX   : Display poster preview
    end
end

opt Manager selects to adjust poster crop
    Mngr -> NTX     : Selects to adjust poster
    NTX -->> Mngr   : Shows cropping view
    Mngr -> NTX     : Adjusts crop
    Mngr <<-- NTX   : Update poster preview
end

Mngr <<- NTX    : Enable submission

Mngr -> NTX     : Submit form data
NTX -> NTX      : Process submission

alt processing succeeded
    Mngr <<-- NTX   : Redirect to movie inspection page
else else
    Mngr <<-- NTX   : Display error message
end 
@enduml

@startuml E1U1_NTX-BE_PVL3
!include MagicDraw.puml
mainframe E1U1_NTX-BE_PVL3

box "<<module>>\nMovies"
    participant MoviesCtrl as ": MoviesController"
    participant MoviesSrv as ": MoviesService"
    participant Movie as ": Movie"
end box
box "<<module>>\nImages"
    participant PosterSrv as ": PosterService"
end box

[o-> MoviesCtrl++ : POST /api/v1/movies\n(json body: CreateMovieDTO)
    MoviesCtrl -> MoviesCtrl : validate CreateMovieDTO
    alt validation errors
        [o<<-- MoviesCtrl : error (status 400)
    else else
        MoviesCtrl -> MoviesSrv++ : createMovie(dto: CreateMovieDTO)
            MoviesSrv -> PosterSrv++ : createPoster(file: File)
                note right: creates optimized\nposter of all sizes\n(L, M, S, XS)
                PosterSrv -> PosterSrv : generate posterID
                PosterSrv -> PosterSrv : addCreatePosterJob(file, posterID)
            MoviesSrv <<-- PosterSrv : posterID: string
            PosterSrv -> PosterSrv : process CreatePoster job
            MoviesSrv -->> Movie** : <<create>>
            deactivate PosterSrv
            MoviesSrv ->> Movie++ : save movie data
            MoviesSrv -> MoviesSrv : map Movie to MovieDTO
            deactivate Movie
        MoviesCtrl <<-- MoviesSrv : MovieDTO
        deactivate MoviesSrv
    [o<<-- MoviesCtrl : response 201\n(json body: MovieDTO)
    end
@enduml


